{
  "name": "hxmath",
  "url": "https://github.com/tbrosman/hxmath",
  "license": "MIT",
  "tags": ["math", "cross"],
  "description": "A 2D/3D math library for Haxe implemented using abstracts for maximum compatibility with existing libraries (specifically OpenFL).",
  "version": "0.12.0",
  "releasenote": "Performance improvements:\n- Added in-place operators wherever possible to Vector classes to reduce new allocations (issue #23)\n- [breaking change] Fixed the abstract signatures to use *Type instead of *Default, removed some random includes added by FlashDevelop, and finally added the option to use OpenFL types as inner types (issue #17). To use this feature use HXMATH_USE_OPENFL_STRUCTURES. Note that this change (6cd6c97) means that auto-casting will no longer 'just work' even if HXMATH_USE_DYNAMIC_STRUCTURES is specified (no longer supported). This decision was made due to the massive performance gain on native platforms when using static types.\n- [breaking change] Changed the inner type in Quaternion to be a flat structure (no more inner Vector3) (issue #33). The product isn't as clean, but it should be faster (especially when it comes to the GC).\n\nNew features:\n- Vector functions from Unity3D. See https://github.com/tbrosman/hxmath/issues/30#issuecomment-78432760 for a table mapping Unity functions to hxmath equivalents. Additions include orthoNormalize, slerp, projectOntoPlane, and more.\n- Array2 with two implementations (Sparse and Dense) (issue #3). Not really math, but extremely useful for things like tilemaps and grid collision.\n- ShortVector2, an int vector with 16-bit fields implemented as an abstract over Int. It requires no allocation to 'construct.'\n\nMisc:\n- Added toString defaults for all structures (issue #21).",
  "contributors": ["tbrosman"],
  "dependencies": {
  }
}